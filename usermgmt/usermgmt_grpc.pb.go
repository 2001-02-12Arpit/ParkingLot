// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_usermgmt_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParkingLotClient is the client API for ParkingLot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkingLotClient interface {
	ParkYourCar(ctx context.Context, in *NewCar, opts ...grpc.CallOption) (*SlotNumber, error)
	UnparkYourCar(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CarList, error)
	GetParkedCars(ctx context.Context, in *GetAllCars, opts ...grpc.CallOption) (*CarList, error)
}

type parkingLotClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingLotClient(cc grpc.ClientConnInterface) ParkingLotClient {
	return &parkingLotClient{cc}
}

func (c *parkingLotClient) ParkYourCar(ctx context.Context, in *NewCar, opts ...grpc.CallOption) (*SlotNumber, error) {
	out := new(SlotNumber)
	err := c.cc.Invoke(ctx, "/usermgmt.ParkingLot/ParkYourCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingLotClient) UnparkYourCar(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CarList, error) {
	out := new(CarList)
	err := c.cc.Invoke(ctx, "/usermgmt.ParkingLot/UnparkYourCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingLotClient) GetParkedCars(ctx context.Context, in *GetAllCars, opts ...grpc.CallOption) (*CarList, error) {
	out := new(CarList)
	err := c.cc.Invoke(ctx, "/usermgmt.ParkingLot/GetParkedCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkingLotServer is the server API for ParkingLot service.
// All implementations must embed UnimplementedParkingLotServer
// for forward compatibility
type ParkingLotServer interface {
	ParkYourCar(context.Context, *NewCar) (*SlotNumber, error)
	UnparkYourCar(context.Context, *Id) (*CarList, error)
	GetParkedCars(context.Context, *GetAllCars) (*CarList, error)
	mustEmbedUnimplementedParkingLotServer()
}

// UnimplementedParkingLotServer must be embedded to have forward compatible implementations.
type UnimplementedParkingLotServer struct {
}

func (UnimplementedParkingLotServer) ParkYourCar(context.Context, *NewCar) (*SlotNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParkYourCar not implemented")
}
func (UnimplementedParkingLotServer) UnparkYourCar(context.Context, *Id) (*CarList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnparkYourCar not implemented")
}
func (UnimplementedParkingLotServer) GetParkedCars(context.Context, *GetAllCars) (*CarList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkedCars not implemented")
}
func (UnimplementedParkingLotServer) mustEmbedUnimplementedParkingLotServer() {}

// UnsafeParkingLotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingLotServer will
// result in compilation errors.
type UnsafeParkingLotServer interface {
	mustEmbedUnimplementedParkingLotServer()
}

func RegisterParkingLotServer(s grpc.ServiceRegistrar, srv ParkingLotServer) {
	s.RegisterService(&ParkingLot_ServiceDesc, srv)
}

func _ParkingLot_ParkYourCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingLotServer).ParkYourCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.ParkingLot/ParkYourCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingLotServer).ParkYourCar(ctx, req.(*NewCar))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingLot_UnparkYourCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingLotServer).UnparkYourCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.ParkingLot/UnparkYourCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingLotServer).UnparkYourCar(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingLot_GetParkedCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCars)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingLotServer).GetParkedCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.ParkingLot/GetParkedCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingLotServer).GetParkedCars(ctx, req.(*GetAllCars))
	}
	return interceptor(ctx, in, info, handler)
}

// ParkingLot_ServiceDesc is the grpc.ServiceDesc for ParkingLot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParkingLot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.ParkingLot",
	HandlerType: (*ParkingLotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParkYourCar",
			Handler:    _ParkingLot_ParkYourCar_Handler,
		},
		{
			MethodName: "UnparkYourCar",
			Handler:    _ParkingLot_UnparkYourCar_Handler,
		},
		{
			MethodName: "GetParkedCars",
			Handler:    _ParkingLot_GetParkedCars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgmt/usermgmt.proto",
}
